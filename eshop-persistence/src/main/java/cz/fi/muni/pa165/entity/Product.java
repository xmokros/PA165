package cz.fi.muni.pa165.entity;


// TODO Map class Product to be an entity with the following attributes:
// * id - autogenerated @Id using IDENTITY column
// * name - nonnullable, unique
// * color - you will have to create new ENUM for this
// * java.util.Date addedDate - this field should contain only date in the database. Use @Temporal annotation
// Then persist exactly one Product with the following values:
// * name='Guitar'
// * color=Color.BLACK
// * dateAdded = 20-01-2011 - to fill java.util.Date use Calendar
//
// Additional task: Change the underlying table of Product entity to be ESHOP_PRODUCTS. After you do this, check this by inspecting console output (the CREATE TABLE statement)
//
// To test your code uncomment the commented code at the end of this method.

import cz.fi.muni.pa165.enums.Color;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.Objects;

@Entity
@Table(name="ESHOP_PRODUCTS")
public class Product {

    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private Long id;

    @NotNull
    @Column(nullable = false, unique = true)
    private String name;

    @Enumerated
    private Color color;

    @Temporal(TemporalType.DATE)
    private Date addedDate;

    public Product() {
    }

    public Product(String name, Color color, Date addedDate) {
        this.name = name;
        this.color = color;
        this.addedDate = addedDate;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public Date getAddedDate() {
        return addedDate;
    }

    public void setAddedDate(Date addedDate) {
        this.addedDate = addedDate;
    }

    //Implement business equivalence on Product (equals and hashcode method). Tip: Product.name is nonullable and should have unique values
    //This is very important concept and you should understand it beyond just "making this method work"
    // see https://developer.jboss.org/wiki/EqualsandHashCode

    //TODO after you implement equals nad hashCode, you can uncomment the code below. It will try
    // to check whether you are doing everything correctly.

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof Product)) return false;
        Product product = (Product) o;
        return Objects.equals(this.getName(), product.getName());
    }

    @Override
    public int hashCode() {
        final int hash = 17;
        int result = 1;
        result = hash * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }
}
